export interface GithubRepoInfo {
    url: string;
    owner: string;
    repo: string;
}
export interface Configuration {
    site: {
        id: string;
        name?: string;
        team: string;
        platform: string;
        source: 'github' | 'ipfs' | string;
    };
    build: {
        command?: string;
        environment?: Record<string, string>;
        /**
         * Absolute path of the directory containing the .fleek.json file.
         */
        rootDir: string;
        /**
         * Absolute path of the public directory.
         */
        publicDir: string;
        /**
         * Absolute path of the base directory.
         */
        baseDir: string;
    };
}
export declare const ConfigurationFilename = ".fleek.json";
export interface SchemaValidationError {
    message?: string;
    dataPath: string;
}
export declare type LoadConfigurationResult = {
    notFound: true;
} | {
    errors: SchemaValidationError[];
} | Configuration;
/**
 * Responsible for working with the project environment.
 */
export declare class ProjectUtils {
    static getGitRemoteUrl(remote?: string): Promise<string | undefined>;
    /**
     * Return the github repo of the current directory.
     */
    static getGithubRepository(): Promise<GithubRepoInfo | undefined>;
    static saveConfiguration(config: Configuration, dirPath: string): Promise<void>;
    /**
     * Try to find, parse and validate the nearest .fleek.json file.
     */
    static loadConfiguration(): Promise<LoadConfigurationResult>;
    static mustLoadConfigruation(): Promise<Configuration>;
}
