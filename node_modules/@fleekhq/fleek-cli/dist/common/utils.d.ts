import { ProgramOptions } from './models/program-options';
interface Indexable {
    [key: string]: string;
}
export declare class Utils {
    static ALIASES: Indexable;
    /**
     * This will get all the program arguments
     */
    static getProgramArguments(): ProgramOptions;
    /**
     * Check if a value is a hex
     * @param hex The hex string
     */
    static isHex(hex: string): boolean;
    /**
     * To hex string
     * @param value The value
     */
    static toHex(value: any): string;
    /**
     * Bytes to hex
     * @param bytes The bytes
     */
    static bytesToHex(bytes: Uint8Array): string;
    /**
     * Adding padding to the hex
     * @param hex The hex string
     * @param charAmount The char amount
     */
    static padLeft(hex: string, charAmount: number): string;
    /**
     * Hex to bytes
     * @param hex The hex string
     */
    static hexToBytes(hex: string): Uint8Array;
    /**
     * Checks to see if its a uint8array
     * @param array The array
     */
    static isUint8Array(array: Uint8Array): boolean;
    /**
     * Check if bytes are equal
     * @param array1 The uint8array 1
     * @param array2 the uint8array 2
     */ static isBytesEqual(array1: Uint8Array, array2: Uint8Array): boolean;
    /**
     * Converts a ethereum address to a checksum address
     * @param address The string ethereum address
     */
    static toChecksumAddress(address: string): string;
    /**
     * Deep clone a object
     * @param object The object
     */
    static deepClone<T>(object: T): T;
    /**
     * Splits the array to string
     * @param value The value
     * @param seperator The seperator
     */
    static splitArrayToString(value: string, seperator: string): string[];
    /**
     * Checks if a given string is a valid Ethereum address.
     * It will also check the checksum, if the address has upper and lowercase letters.
     * @param address The ethereum address
     */
    static isAddress(address: string): boolean;
    /**
     * Is string invalid
     * @param value The value
     * @param minLength The min length
     */
    static isStringInvalid(value: string, minLength?: number): boolean;
    /**
     * Generates a random string
     * @param size The length of the string
     * @param base The alphabet to use
     */
    static generateRandomString(size: number, base?: string): string;
    /**
     * Return the host name of this system.
     */
    static computerName(): string | undefined;
}
export default Utils;
