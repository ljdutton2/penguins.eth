export declare const SiteFragment = "\n  ... on Site {\n    id\n    name\n    platform\n  }\n";
export interface Site {
    id: string;
    name: string;
    platform: 'ipfs' | 'dfinity' | string;
}
export declare const FullSiteFragment = "\n  ... on Site {\n    id\n    name\n    platform\n    buildSettings {\n      buildCommand\n      baseDirectoryPath\n      publishDirectoryPath\n      dockerImage\n      environmentVariables { name value }\n    }\n    deploySettings {\n      autoPublishing\n      prDeployPreviews\n      dfinityUseProxy\n      source {\n         ... on Repository { type url branch }\n         ... on IpfsSource { cid }\n      }\n    }\n  }\n";
export interface BuildSettings {
    buildCommand?: string;
    baseDirectoryPath?: string;
    publishDirectoryPath?: string;
    dockerImage?: string;
    environmentVariables: EnvironmentVariable[];
}
export interface DeploySettings {
    autoPublishing: boolean;
    prDeployPreviews: boolean;
    dfinityUseProxy?: boolean;
    source: GithubSiteSource | IpfsSiteSource;
}
export interface FullSite extends Site {
    buildSettings: BuildSettings;
    deploySettings: DeploySettings;
}
export declare enum DeployStatus {
    InProgress = "IN_PROGRESS",
    Deployed = "DEPLOYED",
    Failed = "FAILED",
    Cancelled = "CANCELLED"
}
export declare const DeployFragment = "\n  ... on Deploy {\n    id\n    status\n    published\n  }\n";
export interface Deploy {
    id: string;
    status: DeployStatus;
    published: boolean;
}
export interface GetSitesByTeamResponse {
    getSitesByTeam: {
        sites: Site[];
    };
}
export interface GithubSiteSource {
    url: string;
    branch: string;
    installationId: string;
}
export interface IpfsSiteSource {
    cid: string;
}
interface EnvironmentVariable {
    name: string;
    value?: string;
}
export interface BuildSettingsInput {
    buildCommand?: string;
    baseDirectoryPath?: string;
    publishDirectoryPath?: string;
    dockerImage?: string;
    environmentVariables?: EnvironmentVariable[];
}
export interface DeploySettingsInput {
    autoPublishing?: boolean;
    prDeployPreviews?: boolean;
    dfinityUseProxy?: boolean;
    githubSource?: GithubSiteSource;
    ipfsSource?: IpfsSiteSource;
}
export interface AddSiteInput {
    teamId: string;
    platform: 'ipfs' | 'dfinity' | string;
    githubSource?: GithubSiteSource;
    ipfsSource?: IpfsSiteSource;
    buildSettings?: BuildSettingsInput;
}
export {};
